#+title:  mf-tag-write.el (音楽ファイルのタグを編集する emacs の関数)
#+date:   Sat Sep 26 08:29:41 2020
#+AUTHOR: fubuki@frill.org

* 概要
- 音楽ファイルのタグの変更が一括処理できます。
- m4a(mp4) mp3(ID3v2.2, ID3v2.3) oma(Atrac3Plus) flac に対応しています。
- mp3 は同期データには未対応です。
- mp3 は古い規定外の sjis になっているタイトルも正常に読めるようにしてあります(つもり)。その場合編集すると規定のコーディングに変換されて書き込まれます。

よくあるスクリプト支援関数ですが、おそらく atrac 用は無いと思うので公開します。

* インストール
[[https://github.com/s-fubuki/wtag.git][ここからダウンロード]]展開コピーし init.el で load-path を通し require します。

展開した wtag ディレクトリを "~/.emacs.d/local/" 下にコピーした場合です。

#+BEGIN_SRC emacs-lisp
(setq load-path (cons "~/.emacs.d/local/wtag/" load-path))
(require 'mf-tag-write)
#+END_SRC

* 使い方
以下のようにファイル名と書き換えしたいタグを指定します。
タグは lisp の連想リストの形式で指定します。
指定のないタグはスルーされそのまま残ります。

文字コーディングもバイナリにパッキングするときに適宜変換するので、特に考えずそのまま書いて大丈夫です。

#+BEGIN_SRC emacs-lisp
(mf-tag-write "file.m4a" '(("TALB" . "新アルバム") ("TIT2" . "新しい曲")))
#+END_SRC

CAR がシンボルならエイリアスになり、例えば "TALB" なら album 等と書けます。
これによってコーデックをまたいで同じシンボルが使えるようになります。
これについては次項で述べます。

#+BEGIN_SRC emacs-lisp
(mf-tag-write "file.oma" '((album . "新アルバム") (title . "新しい曲")))
#+END_SRC

デフォルトでは元のファイルをバックアップしますが三番目の引数に `NON-NIL' を指定すると
バックアップは作りません。
文字列だとファイル名と見なし、そのファイルに書き出されバックアップも作りません。

#+BEGIN_SRC emacs-lisp
(mf-tag-write "file.mp3" '((album . "新アルバム") (title . "新しい曲")) t)
(mf-tag-write "file.mp3" '((album . "新アルバム") (title . "新しい曲")) "out-file.mp3")
#+END_SRC

# ** エイリアス
# alias の 各tag との対応は 変数 `mf-*-tag-alias'[^1] に連想リストで設定されています。
# てっとり早いのは変数の末尾にカーソルを置いて C-x C-e するとエコーエリアに表示されるので、C-h C-e 等で広げて見れます。
# 
# | mode            | symbol            |
# |-----------------+-------------------|
# | mp3(ID3v2.3)    | mf-id33-tag-alias |
# | mp3(ID3v2.2)    | mf-id32-tag-alias |
# | oma(Atrac3Plus) | mf-oma-tag-alias  |
# | m4a(mp4)        | mf-mp4-tag-alias  |
# | flac            | mf-flac-tag-alias |
# 
# 
# [^1]: `*' がコーデック種になります。 

** アートワークの指定

アートワークいわゆるジャケットの場合、
手動だとバイナリで指定するわけにもいかないのでファイル名で間接指定できます。

#+BEGIN_SRC emacs-lisp
(mf-tag-write "file.m4a" '((cover . "~/artwork.jpg")))
#+END_SRC

コンセルではなく拡張子が `jpg' か `png' のファイル名文字列ならアートワークの指定と見なします。
つまりコンセルでなく単一の文字列であるなら拡張子で判断しています。
括弧が1レベル無くなることに注意してください。

#+BEGIN_SRC emacs-lisp
(mf-tag-write "file.mp4" '("~/artwork.jpg"))
#+END_SRC

以下のように間違えるとリストであり文字列ではないので次項で説明する "~/artwork.jpg" というタグを削除する指定になるので、常にコンスセル(ドットペア)で書くようにした方がミスがないかもしれません。

#+BEGIN_SRC emacs-lisp
間違い: (mf-tag-write "file.mp4" '(("~/artwork.jpg")))
#+END_SRC

テキストも拡張子 `txt' のファイルで同様に指定し iTunes の Lyric 欄等に反映されるデータになります。
これは .oma file のみ対応していません。

** タグの削除
タグまたはシンボルだけを指定します。
以下だと cover タグと copy タグのデータが削除されます。

#+BEGIN_SRC emacs-lisp
(mf-tag-write "file.m4a" '((cover) (copy)))
#+END_SRC

削除する場合 TAG に NIL 指定するので以下の省略表記ということです。
これもきちんとこう書いた方がミスが少ないかもしれません。

#+BEGIN_SRC emacs-lisp
(mf-tag-write "file.m4a" '((cover . nil) (copy . nil)))
#+END_SRC

** 簡単な使用例
今までの例と大差ないですが、 "file.m4a" のアルバム名、ジャンル名とジャケットを差し替えてリリックを削除します。バックアップはせず元のファイル名で書き出されます。

#+BEGIN_SRC emacs-lisp
(mf-tag-write "file.m4a" '((album . "新アルバム名") (genre . "Rock") "~/image.jpg" (lyric)) 'no-backup)
#+END_SRC

Directory の中の mp4 file をまとめて処理したいときは、以下のようなループを組むことが考えられます。 `dolist' は他言語の `foreach' 相当の処理をする引数のリストの要素だけ反復するマクロです。

#+BEGIN_SRC emacs-lisp
(dolist (f (eshell-extended-glob "~/foo/*.mp4"))
  (mf-tag-write f '((album . "foo album") (artist . "bar artist") "~/baz.jpg") t))
#+END_SRC

** 対話式インターフェイスを介しての利用
wtag と taged というインタラクティブなお手軽インターフェイスを同梱しています。
それぞれラッパーの dired-wtag, dired-taged から実行することにより、
dired でポイントされたディレクトリ(wtag)やファイル(taged)を対象にできます。

エコーエリアに簡易表示するだけなら dired-music-file-get-title が同梱されています。

* ソニーのアプリから作ったデータについて
SonicStageCP や MediaGo, MusicCenter1..2 等のソニーのアプリ(以下 X-アプリも含めてソニーアプリと書きます)でリッピングしたデータの場合、タグ変更を行なうついでに重複登録された画像等をデリートしているのでそれについて述べます。
ちなみに元々はこれが目的で1年前に書いたプログラムでした。

消さずに残すこともできますがその方法は次の項目で述べます。
このデリートに関してはソニーアプリ以外で作ったデータにはほぼ関係無いので、該当しない場合読み飛ばされても大丈夫です。(但しレコチョクのデータには関係あり::[[https://qiita.com/s-fubuki/items/0f470b859837927b4e28#m4a-%E3%81%A0%E3%81%A8-walkman-%E3%81%A7%E3%82%B8%E3%83%A3%E3%82%B1%E3%81%8C%E8%A1%A8%E7%A4%BA%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E5%95%8F%E9%A1%8C][m4a だと Walkman でジャケが表示されない問題]]

** ひとつのファイルに同じ複数の画像を持っている
ソニーアプリでデータを作ってアートワークがセットされると、mp4(aac) でも oma(atrac) でもひとつのデータファイルに同じ画像を複数枚抱き込みます。
SonicStageCP と MediaGo, MusicCenter1 でしか確認していませんが、SonicStageCP と MusicCenter1 の間の版である X-アプリでもおそらく同じだと思います。

複数の機器への互換性をデータ側に吸収させる考えだと思うのですが、データが大きくなりすぎないようにする為なのか画像を無惨に縮小しています。
Walkman では更に縮小したサムネールを作って、そちらで表示しているのでクオリティダウンされてしまったことに気づきにくいです。

そうした縮小されたまったく同じ画像を atrac では 2枚、 mp4 だと 2～3枚も抱き込んでいます。 参照されるのはそのうちのひとつだけなので、ひとつだけ残して残りを削除しています。
つまりこのツールでタグの書き換えをすると抱え込むアートワークが1枚になります。 (ちなみに MusicCenter2 だと縮小はしなくなったようです?)

** Atrac3Plus (.oma file) で消すもの
いくつか拡張子があるようですが、対応しているのは .oma です。
Atrac3Plus のタグは mp3 の ID3(の4文字のタグのもの)形式をほぼそのまま使っていて、互換性を確保し規格内のディスクリプションを利用して独自拡張をしています。

画像等のバイナリのデータはタグ `GEOB' でディスクプリションが  `OMG_BKLSI' `OMG_FENCA1' `OMG_OLINF' `OMG_TDFCA' と4種類あり、ふたつは画像(同じもの)ですが残りふたつは不明です。
予想ではアーティストリンク等なのでしょうか。
自分はその機能は使っていなかったのですが必ず入っています。

アートワーク画像を差し替えする場合、この 4つある `GEOB' すべてを削除して更めて `GEOB' をひとつ加えてディスクリプション `OMG_TDFCA' で画像をセットしています。
どちらか片方だけ画像のあるデータを作って試したところ、片方だけでも Walkman で表示され違いが判らなかったのでこちらにしましたが深い意味はありません。

画像以外の未知のバイナリタグまで消してしまっていますが、自分の使い方(Walkmanのみ)では今のところ影響は出ていません。

** aac (.mp4 file)で消すもの

クイックタイムの世界ではデータの塊(幹)をアトムと呼ぶようなので以下そう呼びます。

ソニーアプリで作った場合 `udta' `ilst' `meta' `uuid' の各アトムそれぞれにタグ情報が入っていて iTunes 互換であろう処の `ilst' アトム だけ残して アップルタイプでは存在しない `meta' と `uuid' (黄色の箇所)を消しています。(MediaGo だけ `uuid' は無いようです。)
画像を含め曲タイトル等必要なデータは `ilst' にもすべて入っているので問題ありません。
(本文では iTunes の作る "ilst" だけの形式のものをアップルタイプと呼ぶことにします)

![[https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/239081/fd94274a-7265-f524-249a-fdf5aa8e26fc.png][atoms-test-20191219.png]]

`ilst' を覆うようにある `udta' の中にもタイトル情報があり、`ilst' にアートワークを含んだ完全な曲目情報を持っていても、A30 前夜の Walkman だとこちらが存在すると `ilst' の方は参照されません。
この `udta' のデータがソニーのメイン形式のタグだと思われます(この形式を本文ではソニータイプと呼ぶことにします)。mediaGo では `udta' は `ilst' の後にあり図とは位置が違っています。

`udta' 用のアートワーク画像はここではなくこの次の `meta' に入っています。
`meta' はふたつあり `ilst' より後の離れた方の拡張された `meta' です。
そこにはテキストをUTF-16ビッグエンデアンにしたタグがID32形式で入っています。

画像を含んでいてサイズの大きい `meta' の方だけ丸ごと削除しています。 `udta' 側は文字情報のみであまり大きくないしレコチョク等ソニー以外でもデータ自体の持つテキストとして使用していて、MusicCenter でリップした痕跡にもなるのでそのまま残してあります。

そしてこれらの後に音楽データ本体である `mdta' が続き、更にその後 MediaGo 以外だと `uuid' というアトムがあり、 未知の形式でその中にも同じ画像が含まれています。 この `uuid' もソニーのものにしかないので互換のための不要なデータと判断し丸ごと削除しています。
 
あと何故か MP3 のように文字列を ASCIIZ(C言語等のNULL末尾文字列) にしていて、コンバート等でゴミとして出るので末尾の \0 もカットしています。

こちらのデータも2年使ってみて今のところ影響は出ていません。

dired-mp4-atoms-tree を使うとファイルのツリー構造が判りまます。dired から対象ファイルをポイントして `M-x dired-mp4-atoms-tree' してください。(mf-lib-mp4.el に入っています)

** m4a だと Walkman でジャケが表示されない問題

削除とは別にもうひとつデータを書き換える箇所があるのでそれについて述べます。

m4a ファイルを Walkman で再生すると 音は出るがジャケも表示されなければ曲名以外「不明」と出てしまうファイルがあります。 mf-tag-write はそのようなデータならそれを正常化するパッチもあてます。

A30 前夜の Walkman は AAC (m4a mp4) は Apple タイプでも Sony タイプでも読み込めるのですが、どちらのタグセットを使うのかは、おそらく `udta' アトムに `titl' タグがあるかどうかで判別しています。
`titl' があれば Sony 式として `udta' から、無ければ後方の sony `meta' からジャケ等を絵、 それも無ければ `ilst' からタグを読み込んでいます。(今日まで運用し続けどうやらフラグは titl ではないかもしれないと思いはじめました、がこの方式で判断しても今のところ問題ないのでこのままです Thu Sep 24 09:11:18 2020)

`udta' のこの部分は iTunes で生成したデータにはまったく存在しないのですが、レコチョクのものもおそらく用途は違えどソニーのもの同様 `titl' タグが入っているのです。 レコチョクのデータも勿論基本的に事実上の標準である iTunes 形式なので `ilst' にしかタグデータを持っていないので Sony タイプで読み込むとタグの無い「不明」状態になってしまいます。 ただ `titl' はあるのでそれが曲名として表示されます。

A30 以降だと `ilst' の方しか見ないのでジャケが出ない等の不具合は無いのですが、MusicCenter は未だに A30 以降では参照もしないいくつもの同じ画像をつけた無駄なデータを生成しています。

** ジャケが表示されない問題の対策
この状況を騙すため `udta' に `titl' タグがあれば `Titl' に書き換えて `titl' が無いように見せかけます。 削除までしていません。

このたった1バイトの変更でレコチョクや MORAで購入した m4a も A30前夜の Walkman でもジャケやアー名等のタグ情報が表示されるようになります。

** 削除やパッチを制御する変数

以上の処理はデータがそのようなデータならデフォルトで行なわれますが、データにそのような部分がなければその処理もされないので iTunes でリップしたデータ等にはデフォルトでも何の影響もありません。
が、処理を完全に抑止することも以下のオプション変数でできます。

: (setq mf-no-mc-delete t) ; ソニー拡張部を削除しない

mf-tag-write.el でタグの書き換えとするとき、この変数が `NON-NIL' 設定されていると、複数の画像が含まれたソニー系アプリの mp4 や oma データの場合でも重複画像の削除を行ないません。デフォルトは nil で削除されます。

: (setq mf-no-one-patch t) ; `udat'に偽装パッチを当てない

この変数が `NON-NIL' であるとソニータイプを消す `titl' タグパッチを充てません。 mf-tag-write のタグの書き換えは `ilst' の箇所(アップルタイプ)しかしないので、 ソニータイプ優先の A30 前夜の Walkman 等は書き換えたタグが反映されなくなります。こちらもデフォルトは nil なのでパッチ処理されます。

* ギャップレスについて
現在のソニーアプリ(MusicCenter)でリップしたデータを Walkman ZX100 や A37 でテストした結果です。

iTunes で作成した純粋なアップルタイプの場合タグでギャップレス情報を持っていて、再生側で繋るよう調整しているようなので、 Sony ツールで作成したファイルのタグから未知の余計な部分をカットしたとき、ギャップレス情報も消されてしまうんではという懸念があったのですが、結論から言って大丈夫でした。mp4(m4a), mp3 共に mf-tag-write を通したものとそうでないものに違いは出ません。
mp4 に限っては atrac 同様データ自体がギャップレスでできているようです。
なので逆に CD 1枚通してリップせず曲単位でバラでリップするとブツ切れになる可能性がありますが。

mp3 は 一見ギャプレス風に再生されるのですが、トラックをまたいで連続した曲だと繋ぎ目でリズムが狂います。
クリックが出ないようにクロスフェード風につなげて連続再生しているだけだと思います。
他方 mp4 だと oma のように CD そのままでリズムが狂うこともなくスムースに接続されます。

おそらく FLAC ならそういう問題もなくマスターとしての保存にも適していますが、いかんせんデータが大きすぎるので、大量にお手軽に扱いたい自分にはまだ向きません。

* mf-tag-read
まとめて処理する場合処理に合わせてループを組んだりできるので関数で使えるのがいいのですが、お手軽にちょっとタイトル変えたい等というときは、インタラクティブなインターフェイスがあると便利なので、そういうものを挟み込めるようリード関数とライト関数を分けてあります。

読み出し側関数はタグリストを返すのみでバッファにプリントするわけでもないのでインタラクティブにはしていません。スクラッチ等で実行すると返されたリストが見れます。

#+BEGIN_SRC emacs-lisp
(mf-tag-read "01-甘酸っぱい春にサクラサク.oma" 1024 t)
((:tag " *ver" :data "ea3^C") (:tag "TIT2" :data "甘酸っぱい春にサクラサク") (:tag "TPE1" :data "Berryz工房 x ℃-ute") (:tag "TALB" :data "甘酸っぱい春にサクラサク [Berryz工房盤]") (:tag "TCON" :data "Japanese Pop") (:tag "TXXX" :dsc "OMG_TPE1S" :data "Berryzコウボウ x ℃-ute") (:tag "TXXX" :dsc "OMG_TRACK" :data "1") (:tag "TYER" :data "2011") (:tag "TXXX" :dsc "OMG_AGENR" :data "Japanese Pop") (:tag "TXXX" :dsc "OMG_ALBMS" :data "アマズッパイハルニサクラサク [Berryzコウボウバン]") (:tag "TXXX" :dsc "OMG_ASGTM" :data "875000") (:tag "TXXX" :dsc "OMG_ATP1S" :data "ベリーズコウボ　ｘ　?ｕｔｅ") (:tag "TXXX" :dsc "OMG_ATPE1" :data "Berryz工房 x ℃-ute") (:tag "TXXX" :dsc "OMG_TIT2S" :data "アマズッパイハルニサクラサク") (:tag "TXXX" :dsc "OMG_TRLDA" :data "2011/01/01 00:00:00") (:tag "TCOM" :data "つんく♂") (:tag "TLEN" :data "305000") (:tag "TXXX" :dsc "USR_L2TMDDA" :data "2011/11/08 17:47:14"))
#+END_SRC

オプション引数なしだとファイルを丸ごと読み込みますが、ふたつめの引数で読み込む長さをバイトで指定できます。足らないと必要分読み直します。

みっつめの引数が non-nil なら通常巨大であるカバー等のバイナリタグを読み込みません。
主にデバッグ用です。

lib-utility も load してあれば `mf-tag-list' を使ってバッファ表示できます。
read/write 関数を使ったサンプルを他にも同梱してあるので、それらは別の頁で紹介します。

* 動作 test した環境

以下のバージョンの Emacs でいつも使っている通常の win10 環境で
-Q 起動して最低限の準備だけした状態で動くことを確認しました。

#+BEGIN_EXAMPLE
GNU Emacs 27.1 (build 1, x86_64-w64-mingw32)
 of 2020-08-22
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
(cd wtag)
(setq load-path (cons nil load-path)) 
(require 'mf-tag-write)
#+END_SRC

使ったデータは 90% が SonicStageCP, MediaGoGo, MusicCenter1, 2 でリッピングしたデータで残りが iTunes やレコチョク, dead.net 等のデータです。

* 変更履歴
** Thu Sep 24 16:48:58 2020
CHANGES file 参照.

** Fri Jan 17 15:29:24 2020
This Text: MediaGo で作られた mp4アトム の配置が MusicCenter で作られたものとは少し違っていたので、この文章の中のその箇所を修正しました。

mf-tag-write: このドキュメントではアートワークの指定でオブジェクトが指定できるようになっていますが、 実装が保留されていたいたことに気づいて実装しました。 リリックも同様の仕様です。

wtag: kakasi で nkf を不要に/ shell-file-name が CMD.EXE でもちゃんと動くように(Emacs の shell をそうしている人はいないと思いますが...)/ wtag-log-file-name が `NIL' ならログをファイルに書き出さない. 1 file でも動くようになっていたのがいつのまにが駄目になっていたので別途 1ファイル専用の aged を追加.

** Tue Dec 31 12:41:57 2019 1.1
MediaGo の mp4 でソニータイプの判断を誤っていたため修正しました。
MediaGo でリップし MusicCenter に取り込むと MusicCenter 上でジャケやタイトル等のデータの修正ができないので、 MediaGo でリップした曲は MusicCenter で更めてリッピングし直していて勘違いしていました。
このドキュメントの関連する部分も修正しました。 済みませんでした。

*  参考サイト等
- [[https://ja.wikipedia.org/wiki/ID3%E3%82%BF%E3%82%B0][Wikipedia ID3タグ]]
- [[http://id3.org/][ID3v2公式(?)]]
- [[http://eleken.y-lab.org/report/other/mp3tags.shtml][MP3ファイルのタグについて (+MP4)]]
- [[http://www.cactussoft.co.jp/Sarbo/divMPeg3UnmanageID3v2.html][Cactus Software サウンド・MIDI マルチメディア アプリケーション]]
- [[https://github.com/uupaa/H264.js/wiki/MP4][MP4 - MP4 Basic file structure]]
- [[http://atomicparsley.sourceforge.net/][AtomicParsley]]
